import { z } from "zod";
import { publicProcedure as protectedProcedure, router } from "../_core/trpc";
import { db } from "../db";
import { 
  clients, 
  vipPortalAuth, 
  vipPortalConfigurations 
} from "../../drizzle/schema";
import { eq } from "drizzle-orm";
import bcrypt from "bcryptjs";
import { TRPCError } from "@trpc/server";

/**
 * VIP Portal Admin Router
 * Admin-facing endpoints for managing VIP client portals
 */
export const vipPortalAdminRouter = router({
  // ============================================================================
  // CLIENT MANAGEMENT
  // ============================================================================
  
  clients: router({
    // Get all VIP-enabled clients
    listVipClients: protectedProcedure
      .input(z.object({
        limit: z.number().optional().default(50),
        offset: z.number().optional().default(0),
      }))
      .query(async ({ input }) => {
        const vipClients = await db.query.clients.findMany({
          where: eq(clients.vipPortalEnabled, true),
          limit: input.limit,
          offset: input.offset,
          orderBy: (clients, { desc }) => [desc(clients.vipPortalLastLogin)],
        });

        return { clients: vipClients };
      }),

    // Enable VIP portal for a client
    enableVipPortal: protectedProcedure
      .input(z.object({
        clientId: z.number(),
        email: z.string().email(),
        initialPassword: z.string().min(8),
      }))
      .mutation(async ({ input }) => {
        // Check if client exists
        const client = await db.query.clients.findFirst({
          where: eq(clients.id, input.clientId),
        });

        if (!client) {
          throw new TRPCError({
            code: "NOT_FOUND",
            message: "Client not found",
          });
        }

        // Enable VIP portal on client
        await db.update(clients)
          .set({ vipPortalEnabled: true })
          .where(eq(clients.id, input.clientId));

        // Create auth record
        const passwordHash = await bcrypt.hash(input.initialPassword, 10);
        await db.insert(vipPortalAuth).values({
          clientId: input.clientId,
          email: input.email,
          passwordHash,
        });

        // Create default configuration
        await db.insert(vipPortalConfigurations).values({
          clientId: input.clientId,
          moduleDashboardEnabled: true,
          moduleArEnabled: true,
          moduleApEnabled: true,
          moduleTransactionHistoryEnabled: true,
          moduleVipTierEnabled: true,
          moduleCreditCenterEnabled: true,
          moduleMarketplaceNeedsEnabled: true,
          moduleMarketplaceSupplyEnabled: true,
          featuresConfig: {
            dashboard: {
              showGreeting: true,
              showCurrentBalance: true,
              showYtdSpend: true,
              showQuickLinks: true,
            },
            ar: {
              showSummaryTotals: true,
              showInvoiceDetails: true,
              allowPdfDownloads: true,
              highlightOverdue: true,
            },
            ap: {
              showSummaryTotals: true,
              showBillDetails: true,
              allowPdfDownloads: true,
              highlightOverdue: true,
            },
            transactionHistory: {
              showAllTypes: true,
              allowDateFilter: true,
              allowTypeFilter: true,
              allowStatusFilter: true,
              showDetails: true,
              allowPdfDownloads: true,
            },
            vipTier: {
              showBadge: true,
              showRequirements: true,
              showRewards: true,
              showProgress: true,
              showRecommendations: true,
            },
            creditCenter: {
              showCreditLimit: true,
              showCreditUsage: true,
              showAvailableCredit: true,
              showUtilizationVisual: true,
              showHistory: true,
              showRecommendations: true,
            },
            marketplaceNeeds: {
              allowCreate: true,
              showActiveListings: true,
              allowEdit: true,
              allowCancel: true,
              showTemplates: true,
              requireExpiration: true,
            },
            marketplaceSupply: {
              allowCreate: true,
              showActiveListings: true,
              allowEdit: true,
              allowCancel: true,
              showTemplates: true,
              allowNewStrain: true,
              showTags: true,
            },
          },
          advancedOptions: {
            transactionHistoryLimit: "ALL",
            defaultNeedsExpiration: "5_DAYS",
            defaultSupplyExpiration: "5_DAYS",
            priceInputType: "BOTH",
          },
        });

        return { success: true };
      }),

    // Disable VIP portal for a client
    disableVipPortal: protectedProcedure
      .input(z.object({
        clientId: z.number(),
      }))
      .mutation(async ({ input }) => {
        await db.update(clients)
          .set({ vipPortalEnabled: false })
          .where(eq(clients.id, input.clientId));

        return { success: true };
      }),

    // Get last login info for a client
    getLastLogin: protectedProcedure
      .input(z.object({
        clientId: z.number(),
      }))
      .query(async ({ input }) => {
        const client = await db.query.clients.findFirst({
          where: eq(clients.id, input.clientId),
        });

        const authRecord = await db.query.vipPortalAuth.findFirst({
          where: eq(vipPortalAuth.clientId, input.clientId),
        });

        return {
          lastLogin: client?.vipPortalLastLogin,
          loginCount: authRecord?.loginCount || 0,
        };
      }),
  }),

  // ============================================================================
  // CONFIGURATION MANAGEMENT
  // ============================================================================
  
  config: router({
    // Get configuration for a client
    get: protectedProcedure
      .input(z.object({
        clientId: z.number(),
      }))
      .query(async ({ input }) => {
        const config = await db.query.vipPortalConfigurations.findFirst({
          where: eq(vipPortalConfigurations.clientId, input.clientId),
        });

        if (!config) {
          throw new TRPCError({
            code: "NOT_FOUND",
            message: "VIP portal configuration not found for this client",
          });
        }

        return config;
      }),

    // Update configuration for a client
    update: protectedProcedure
      .input(z.object({
        clientId: z.number(),
        moduleDashboardEnabled: z.boolean().optional(),
        moduleArEnabled: z.boolean().optional(),
        moduleApEnabled: z.boolean().optional(),
        moduleTransactionHistoryEnabled: z.boolean().optional(),
        moduleVipTierEnabled: z.boolean().optional(),
        moduleCreditCenterEnabled: z.boolean().optional(),
        moduleMarketplaceNeedsEnabled: z.boolean().optional(),
        moduleMarketplaceSupplyEnabled: z.boolean().optional(),
        featuresConfig: z.any().optional(),
        advancedOptions: z.any().optional(),
      }))
      .mutation(async ({ input }) => {
        const { clientId, ...updateData } = input;

        await db.update(vipPortalConfigurations)
          .set(updateData)
          .where(eq(vipPortalConfigurations.clientId, clientId));

        return { success: true };
      }),

    // Apply a template to a client's configuration
    applyTemplate: protectedProcedure
      .input(z.object({
        clientId: z.number(),
        template: z.enum(["FULL_ACCESS", "FINANCIAL_ONLY", "MARKETPLACE_ONLY", "BASIC"]),
      }))
      .mutation(async ({ input }) => {
        let templateConfig: any = {};

        switch (input.template) {
          case "FULL_ACCESS":
            templateConfig = {
              moduleDashboardEnabled: true,
              moduleArEnabled: true,
              moduleApEnabled: true,
              moduleTransactionHistoryEnabled: true,
              moduleVipTierEnabled: true,
              moduleCreditCenterEnabled: true,
              moduleMarketplaceNeedsEnabled: true,
              moduleMarketplaceSupplyEnabled: true,
            };
            break;

          case "FINANCIAL_ONLY":
            templateConfig = {
              moduleDashboardEnabled: true,
              moduleArEnabled: true,
              moduleApEnabled: true,
              moduleTransactionHistoryEnabled: true,
              moduleVipTierEnabled: false,
              moduleCreditCenterEnabled: true,
              moduleMarketplaceNeedsEnabled: false,
              moduleMarketplaceSupplyEnabled: false,
            };
            break;

          case "MARKETPLACE_ONLY":
            templateConfig = {
              moduleDashboardEnabled: true,
              moduleArEnabled: false,
              moduleApEnabled: false,
              moduleTransactionHistoryEnabled: false,
              moduleVipTierEnabled: false,
              moduleCreditCenterEnabled: false,
              moduleMarketplaceNeedsEnabled: true,
              moduleMarketplaceSupplyEnabled: true,
            };
            break;

          case "BASIC":
            templateConfig = {
              moduleDashboardEnabled: true,
              moduleArEnabled: true,
              moduleApEnabled: true,
              moduleTransactionHistoryEnabled: false,
              moduleVipTierEnabled: true,
              moduleCreditCenterEnabled: false,
              moduleMarketplaceNeedsEnabled: false,
              moduleMarketplaceSupplyEnabled: false,
            };
            break;
        }

        await db.update(vipPortalConfigurations)
          .set(templateConfig)
          .where(eq(vipPortalConfigurations.clientId, input.clientId));

        return { success: true };
      }),

    // Copy configuration from one client to another
    copyConfig: protectedProcedure
      .input(z.object({
        sourceClientId: z.number(),
        targetClientId: z.number(),
      }))
      .mutation(async ({ input }) => {
        const sourceConfig = await db.query.vipPortalConfigurations.findFirst({
          where: eq(vipPortalConfigurations.clientId, input.sourceClientId),
        });

        if (!sourceConfig) {
          throw new TRPCError({
            code: "NOT_FOUND",
            message: "Source configuration not found",
          });
        }

        const { id, clientId, createdAt, updatedAt, ...configData } = sourceConfig;

        await db.update(vipPortalConfigurations)
          .set(configData)
          .where(eq(vipPortalConfigurations.clientId, input.targetClientId));

        return { success: true };
      }),
  }),

  // ============================================================================
  // VIP TIER MANAGEMENT
  // ============================================================================
  
  tier: router({
    // Get tier configuration (global settings)
    getConfig: protectedProcedure
      .query(async () => {
        // TODO: Implement tier configuration storage
        // For now, return hardcoded tiers
        return {
          tiers: [
            {
              name: "PLATINUM",
              requirements: {
                minYtdSpend: 100000,
                minTransactionCount: 50,
                maxOverdueDays: 0,
              },
              rewards: [
                "Priority support",
                "Exclusive pricing",
                "First access to new products",
              ],
            },
            {
              name: "GOLD",
              requirements: {
                minYtdSpend: 50000,
                minTransactionCount: 25,
                maxOverdueDays: 7,
              },
              rewards: [
                "Enhanced support",
                "Preferred pricing",
                "Early access to new products",
              ],
            },
            {
              name: "SILVER",
              requirements: {
                minYtdSpend: 10000,
                minTransactionCount: 10,
                maxOverdueDays: 30,
              },
              rewards: [
                "Standard support",
                "Standard pricing",
              ],
            },
          ],
        };
      }),

    // Update tier configuration
    updateConfig: protectedProcedure
      .input(z.object({
        tiers: z.array(z.any()),
      }))
      .mutation(async ({ input }) => {
        // TODO: Implement tier configuration storage
        return { success: true };
      }),
  }),

  // ============================================================================
  // LEADERBOARD CONFIGURATION
  // ============================================================================
  
  leaderboard: router({
    // Get leaderboard configuration for a client
    getConfig: protectedProcedure
      .input(z.object({
        clientId: z.number(),
      }))
      .query(async ({ input }) => {
        const config = await db.query.vipPortalConfigurations.findFirst({
          where: eq(vipPortalConfigurations.clientId, input.clientId),
        });

        if (!config) {
          return {
            moduleLeaderboardEnabled: false,
            leaderboardMetrics: [],
            leaderboardDisplayMode: 'black_box',
          };
        }

        const featuresConfig = config.featuresConfig as any || {};
        return {
          moduleLeaderboardEnabled: config.moduleLeaderboardEnabled || false,
          leaderboardMetrics: featuresConfig.leaderboardMetrics || [],
          leaderboardDisplayMode: featuresConfig.leaderboardDisplayMode || 'black_box',
        };
      }),

    // Update leaderboard configuration for a client
    updateConfig: protectedProcedure
      .input(z.object({
        clientId: z.number(),
        moduleLeaderboardEnabled: z.boolean(),
        leaderboardMetrics: z.array(z.string()),
        leaderboardDisplayMode: z.enum(['black_box', 'transparent']),
      }))
      .mutation(async ({ input }) => {
        // Get existing config
        const existingConfig = await db.query.vipPortalConfigurations.findFirst({
          where: eq(vipPortalConfigurations.clientId, input.clientId),
        });

        const featuresConfig = (existingConfig?.featuresConfig as any) || {};
        featuresConfig.leaderboardMetrics = input.leaderboardMetrics;
        featuresConfig.leaderboardDisplayMode = input.leaderboardDisplayMode;

        if (existingConfig) {
          // Update existing config
          await db
            .update(vipPortalConfigurations)
            .set({
              moduleLeaderboardEnabled: input.moduleLeaderboardEnabled,
              featuresConfig: featuresConfig,
              updatedAt: new Date(),
            })
            .where(eq(vipPortalConfigurations.clientId, input.clientId));
        } else {
          // Create new config
          await db.insert(vipPortalConfigurations).values({
            clientId: input.clientId,
            moduleLeaderboardEnabled: input.moduleLeaderboardEnabled,
            featuresConfig: featuresConfig,
          });
        }

        return { success: true };
      }),
  }),
});
